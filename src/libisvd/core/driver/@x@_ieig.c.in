////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file    src/libisvd/core/driver/d_ieig.c
/// @brief   The iEig driver (@xname@ precision).
///
/// @author  Mu Yang <<emfomy@gmail.com>>
///

#include <isvd/core/driver_@x@.h>
#include <isvd/util/memory.h>
#include <isvd/util/arg.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @ingroup  core_driver_@x@_module
/// iEig driver (@xname@ precision).
///
/// @param[in]   algs          The selection of sketching algorithm. <br>
///                            `"GP"`: @ref isvd_@x@SketchGaussianProjection "Gaussian Projection sketching".
/// @param[in]   algo          The selection of orthogonalization algorithm. <br>
///                            `"TS"`: @ref isvd_@x@OrthogonalizeTallSkinnyQr "Tall Skinny qr orthogonalization". <br>
///                            `"GR"`: @ref isvd_@x@OrthogonalizeGramian "GRamian orthogonalization".
/// @param[in]   algi          The selection of integration algorithm. <br>
///                            `"KN"`: @ref isvd_@x@IntegrateKolmogorovNagumo "Kolmogorov-Nagumo integration". <br>
///                            `"WY"`: @ref isvd_@x@IntegrateWenYin "Wen-Yin integration". <br>
///                            `"HR"`: @ref isvd_@x@IntegrateHierarchicalReduction "Hierarchical Reduction integration".
/// @param[in]   algp          The selection of postprocessing algorithm. <br>
///                            `"SY"`: @ref isvd_@x@PostprocessSymmetric "SYmmetric postprocessing".
/// <hr>
/// @param[in]   m             The number of size of the symmetric matrix ùë®.
/// @param[in]   k             The desired rank of approximate SVD.
/// @param[in]   p             The oversampling dimension.
/// @param[in]   N             The number of random sketches.
/// <hr>
/// @param[in]   dista         The parallel distribution of ùë®. <br>
///                            `'C'`: block-column parallelism. <br>
///                            `'R'`: block-row parallelism.
/// @param[in]   ordera        The storage ordering of ùë®. <br>
///                            `'C'`: column-major ordering. <br>
///                            `'R'`: row-major ordering.
/// @param[in]   a, lda        The column/row-block ùë® (@f$m \times n_j@f$) and its leading dimension. <br>
///                            @b dista = `'C'`: the size must be @f$m \times n_j@f$. <br>
///                            @b dista = `'R'`: the size must be @f$m_j \times n@f$.
/// @param[in]   s             The vector ùùà (@f$k \times 1@f$).
/// @param[in]   ut, ldut      The matrix ùëº (row-major) and its leading dimension. <br>
///                            @b ut_root ‚â•  0: the size must be @f$Pm_b \times k@f$, and @b ldut must be @f$l@f$. <br>
///                            @b ut_root = -1: the size must be @f$m_b \times k@f$, and @b ldut must be at least @f$l@f$. <br>
///                            @b ut_root < -1: not referenced.
/// <hr>
/// @param[in]   seed          The random seed (significant only at MPI process of ID @b mpi_root).
/// @param[in]   ut_root       The option for computing ùëº. <br>
///                            @b ut_root ‚â•  0: gather ùëº to the MPI process of ID @b ut_root. <br>
///                            @b ut_root = -1: compute row-block ùëº. <br>
///                            @b ut_root < -1: does not compute ùëº.
/// @param[in]   mpi_root      The MPI process ID containing the parameters and random seed.
/// @param[in]   mpi_comm      The MPI communicator.
/// <hr>
/// @param[out]  s             Replaced by the eigenvalues ùùà.
/// @param[out]  ut            Replaced by the left eigenvectors ùëº (row-major).
///
void isvd_@x@Ieig(
    const char        *algs,
    const char        *algo,
    const char        *algi,
    const char        *algp,
    const isvd_int_t  m,
    const isvd_int_t  k,
    const isvd_int_t  p,
    const isvd_int_t  N,
    const char        dista,
    const char        ordera,
    const @xtype@    *a,
    const isvd_int_t  lda,
          @xtype@    *s,
          @xtype@    *ut,
    const isvd_int_t  ldut,
    const isvd_int_t  seed,
    const mpi_int_t   ut_root,
    const mpi_int_t   mpi_root,
    const MPI_Comm    mpi_comm
) {

  // ====================================================================================================================== //
  // Check arguments

  const int16_t algs_ = isvd_arg2char2("ALGS", algs, "GP",     NULL);
  const int16_t algo_ = isvd_arg2char2("ALGO", algo, "TSGR",   NULL);
  const int16_t algi_ = isvd_arg2char2("ALGI", algi, "KNWYHR", NULL);
  const int16_t algp_ = isvd_arg2char2("ALGP", algp, "SY",     NULL);
  if ( !algs_ || !algo_ || !algi_ || !algp_ ) return;

  isvd_fun_t funs = isvd_@x@arg2algs(algs_);
  isvd_fun_t funo = isvd_@x@arg2algo(algo_);
  isvd_fun_t funi = isvd_@x@arg2algi(algi_);
  isvd_fun_t funp = isvd_@x@arg2algp(algp_);

  // ====================================================================================================================== //
  // Create parameters

  const isvd_int_t n  = m;
  const isvd_Param param = isvd_createParam(m, n, k, p, N, mpi_root, mpi_comm);

  const isvd_int_t mb = param.nrow_each;
  const isvd_int_t l  = param.dim_sketch;
  const isvd_int_t Nl = param.dim_sketch_total;

  // ====================================================================================================================== //
  // Allocate memory

  @xtype@ *yst = isvd_@x@malloc(mb * Nl);
  isvd_int_t ldyst = Nl;

  @xtype@ *qt = isvd_@x@malloc(mb * l);
  isvd_int_t ldqt = l;

  // ====================================================================================================================== //
  // Run

  funs(param, NULL, 0, NULL, 0, dista, ordera, a, lda, yst, ldyst, seed, mpi_root);
  funo(param, NULL, 0, NULL, 0, yst, ldyst);
  funi(param, NULL, 0, NULL, 0, yst, ldyst, qt, ldqt);
  funp(param, NULL, 0, NULL, 0, dista, ordera, a, lda, qt, ldqt, s, ut, ldut, ut_root);

}
